{"ast":null,"code":"// import { useEffect, useState } from \"react\";\n// axios.get('http://localhost:4000/students')\n//     .then((res) => {\n//         setState(res.data);\n//     });\n// import axios from 'axios';\n\n// import axios from 'axios';\n\n// const initialState = { infoContacts: [] };\n\n// const fetchContacts = async () => {\n//     try {\n//         const response = await axios.get('http://localhost:4000/students');\n//         return response.data; // يفترض أنه سيكون هناك خصائص تحتوي على بيانات الاتصال\n//     } catch (error) {\n//         console.error('Failed to fetch contacts:', error);\n//         return []; // في حالة حدوث خطأ، يمكنك تعيين قيمة افتراضية أو القيمة الحالية لـ infoContacts\n//     }\n// };\n\n// const fillInfoContacts = async () => {\n//     try {\n//         const contacts = await fetchContacts();\n//         initialState.infoContacts = contacts;\n//         console.log('Contacts fetched successfully:', initialState.infoContacts);\n//     } catch (error) {\n//         console.error('Failed to fill infoContacts:', error);\n//     }\n// };\n\n// // استدعاء الدالة لتعبئة infoContacts\n// fillInfoContacts();\n\nconst initialState = {\n  infoContacts: [{\n    id: 1,\n    nom: \"Ahmed\",\n    email: \"Ahmed@gmail.com\"\n  }, {\n    id: 2,\n    nom: \"Ahlam\",\n    email: \"Ahlam@gmail.com\"\n  }, {\n    id: 3,\n    nom: \"Said\",\n    email: \"Said@gmail.com\"\n  }]\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"AddContact\":\n      return {\n        ...state,\n        initialState: [...state.initialState, action.payload]\n      };\n    case \"EditeContact\":\n      const contact = state.initialState.find(cn => cn.id == action.payload.id);\n      if (contact) {\n        contact.nom = action.payload.nom;\n        contact.email = action.payload.email;\n      }\n      return state;\n    case \"DetailContact\":\n      return {};\n    case \"DeleteContact\":\n      return {\n        ...state,\n        initialState: [...state.initialState.filter(n => n.id !== parseInt(action.payload))]\n      };\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["initialState","infoContacts","id","nom","email","reducer","state","action","type","payload","contact","find","cn","filter","n","parseInt"],"sources":["C:/Users/hp/Desktop/ramadanProjet/client/src/Atelier3/reducer.js"],"sourcesContent":["\r\n// import { useEffect, useState } from \"react\";\r\n// axios.get('http://localhost:4000/students')\r\n//     .then((res) => {\r\n//         setState(res.data);\r\n//     });\r\n// import axios from 'axios';\r\n\r\n// import axios from 'axios';\r\n\r\n// const initialState = { infoContacts: [] };\r\n\r\n// const fetchContacts = async () => {\r\n//     try {\r\n//         const response = await axios.get('http://localhost:4000/students');\r\n//         return response.data; // يفترض أنه سيكون هناك خصائص تحتوي على بيانات الاتصال\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch contacts:', error);\r\n//         return []; // في حالة حدوث خطأ، يمكنك تعيين قيمة افتراضية أو القيمة الحالية لـ infoContacts\r\n//     }\r\n// };\r\n\r\n// const fillInfoContacts = async () => {\r\n//     try {\r\n//         const contacts = await fetchContacts();\r\n//         initialState.infoContacts = contacts;\r\n//         console.log('Contacts fetched successfully:', initialState.infoContacts);\r\n//     } catch (error) {\r\n//         console.error('Failed to fill infoContacts:', error);\r\n//     }\r\n// };\r\n\r\n// // استدعاء الدالة لتعبئة infoContacts\r\n// fillInfoContacts();\r\n\r\n\r\nconst initialState = {infoContacts: [\r\n    {id: 1, nom: \"Ahmed\", email: \"Ahmed@gmail.com\"},\r\n    {id: 2, nom: \"Ahlam\", email: \"Ahlam@gmail.com\"},\r\n    {id: 3, nom: \"Said\", email: \"Said@gmail.com\"}\r\n]}\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"AddContact\":\r\n            return { ...state, initialState: [...state.initialState, action.payload] };\r\n\r\n\r\n        case \"EditeContact\":\r\n            const contact = state.initialState.find((cn) => cn.id == action.payload.id);\r\n            if (contact) {\r\n                contact.nom = action.payload.nom;\r\n                contact.email = action.payload.email;\r\n            }\r\n            return state;\r\n\r\n        case \"DetailContact\":\r\n            return {};\r\n\r\n        case \"DeleteContact\":\r\n            return { ...state, initialState: [...state.initialState.filter(n => n.id !== parseInt(action.payload))] };\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default reducer;"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA,MAAMA,YAAY,GAAG;EAACC,YAAY,EAAE,CAChC;IAACC,EAAE,EAAE,CAAC;IAAEC,GAAG,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAiB,CAAC,EAC/C;IAACF,EAAE,EAAE,CAAC;IAAEC,GAAG,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAiB,CAAC,EAC/C;IAACF,EAAE,EAAE,CAAC;IAAEC,GAAG,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAgB,CAAC;AAChD,CAAC;AACF,MAAMC,OAAO,GAAGA,CAACC,KAAK,GAAGN,YAAY,EAAEO,MAAM,KAAK;EAC9C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,YAAY;MACb,OAAO;QAAE,GAAGF,KAAK;QAAEN,YAAY,EAAE,CAAC,GAAGM,KAAK,CAACN,YAAY,EAAEO,MAAM,CAACE,OAAO;MAAE,CAAC;IAG9E,KAAK,cAAc;MACf,MAAMC,OAAO,GAAGJ,KAAK,CAACN,YAAY,CAACW,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACV,EAAE,IAAIK,MAAM,CAACE,OAAO,CAACP,EAAE,CAAC;MAC3E,IAAIQ,OAAO,EAAE;QACTA,OAAO,CAACP,GAAG,GAAGI,MAAM,CAACE,OAAO,CAACN,GAAG;QAChCO,OAAO,CAACN,KAAK,GAAGG,MAAM,CAACE,OAAO,CAACL,KAAK;MACxC;MACA,OAAOE,KAAK;IAEhB,KAAK,eAAe;MAChB,OAAO,CAAC,CAAC;IAEb,KAAK,eAAe;MAChB,OAAO;QAAE,GAAGA,KAAK;QAAEN,YAAY,EAAE,CAAC,GAAGM,KAAK,CAACN,YAAY,CAACa,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKa,QAAQ,CAACR,MAAM,CAACE,OAAO,CAAC,CAAC;MAAE,CAAC;IAE7G;MACI,OAAOH,KAAK;EACpB;AAEJ,CAAC;AAED,eAAeD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}