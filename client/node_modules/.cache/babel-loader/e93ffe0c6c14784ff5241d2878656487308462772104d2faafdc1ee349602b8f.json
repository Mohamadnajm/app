{"ast":null,"code":"// import { useEffect, useState } from \"react\";\n// axios.get('http://localhost:4000/students')\n//     .then((res) => {\n//         setState(res.data);\n//     });\n// import axios from 'axios';\n\nimport axios from 'axios';\nconst initialState = {\n  infoContacts: []\n};\nconst fetchContacts = async () => {\n  try {\n    const response = await axios.get('http://example.com/api/contacts');\n    return response.data; // يفترض أنه سيكون هناك خصائص تحتوي على بيانات الاتصال\n  } catch (error) {\n    console.error('Failed to fetch contacts:', error);\n    return []; // في حالة حدوث خطأ، يمكنك تعيين قيمة افتراضية أو القيمة الحالية لـ infoContacts\n  }\n};\nconst fillInfoContacts = async () => {\n  try {\n    const contacts = await fetchContacts();\n    initialState.infoContacts = contacts;\n    console.log('Contacts fetched successfully:', initialState.infoContacts);\n  } catch (error) {\n    console.error('Failed to fill infoContacts:', error);\n  }\n};\n\n// استدعاء الدالة لتعبئة infoContacts\nfillInfoContacts();\n\n// const initialState = {infoContacts: [\n//     {id: 1, nom: \"Ahmed\", email: \"Ahmed@gmail.com\"},\n//     {id: 2, nom: \"Ahlam\", email: \"Ahlam@gmail.com\"},\n//     {id: 3, nom: \"Said\", email: \"Said@gmail.com\"}\n// ]}\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"AddContact\":\n      return {\n        ...state,\n        initialState: [...state.initialState, action.payload]\n      };\n    case \"EditeContact\":\n      const contact = state.initialState.find(cn => cn.id == action.payload.id);\n      if (contact) {\n        contact.nom = action.payload.nom;\n        contact.email = action.payload.email;\n      }\n      return state;\n    case \"DetailContact\":\n      return {};\n    case \"DeleteContact\":\n      return {\n        ...state,\n        initialState: [...state.initialState.filter(n => n.id !== parseInt(action.payload))]\n      };\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["axios","initialState","infoContacts","fetchContacts","response","get","data","error","console","fillInfoContacts","contacts","log","reducer","state","action","type","payload","contact","find","cn","id","nom","email","filter","n","parseInt"],"sources":["C:/Users/hp/Desktop/ramadanProjet/client/src/Atelier3/reducer.js"],"sourcesContent":["\r\n// import { useEffect, useState } from \"react\";\r\n// axios.get('http://localhost:4000/students')\r\n//     .then((res) => {\r\n//         setState(res.data);\r\n//     });\r\n// import axios from 'axios';\r\n\r\nimport axios from 'axios';\r\n\r\nconst initialState = { infoContacts: [] };\r\n\r\nconst fetchContacts = async () => {\r\n    try {\r\n        const response = await axios.get('http://example.com/api/contacts');\r\n        return response.data; // يفترض أنه سيكون هناك خصائص تحتوي على بيانات الاتصال\r\n    } catch (error) {\r\n        console.error('Failed to fetch contacts:', error);\r\n        return []; // في حالة حدوث خطأ، يمكنك تعيين قيمة افتراضية أو القيمة الحالية لـ infoContacts\r\n    }\r\n};\r\n\r\nconst fillInfoContacts = async () => {\r\n    try {\r\n        const contacts = await fetchContacts();\r\n        initialState.infoContacts = contacts;\r\n        console.log('Contacts fetched successfully:', initialState.infoContacts);\r\n    } catch (error) {\r\n        console.error('Failed to fill infoContacts:', error);\r\n    }\r\n};\r\n\r\n// استدعاء الدالة لتعبئة infoContacts\r\nfillInfoContacts();\r\n\r\n\r\n// const initialState = {infoContacts: [\r\n//     {id: 1, nom: \"Ahmed\", email: \"Ahmed@gmail.com\"},\r\n//     {id: 2, nom: \"Ahlam\", email: \"Ahlam@gmail.com\"},\r\n//     {id: 3, nom: \"Said\", email: \"Said@gmail.com\"}\r\n// ]}\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"AddContact\":\r\n            return { ...state, initialState: [...state.initialState, action.payload] };\r\n\r\n\r\n        case \"EditeContact\":\r\n            const contact = state.initialState.find((cn) => cn.id == action.payload.id);\r\n            if (contact) {\r\n                contact.nom = action.payload.nom;\r\n                contact.email = action.payload.email;\r\n            }\r\n            return state;\r\n\r\n        case \"DetailContact\":\r\n            return {};\r\n\r\n        case \"DeleteContact\":\r\n            return { ...state, initialState: [...state.initialState.filter(n => n.id !== parseInt(action.payload))] };\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default reducer;"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EAAEC,YAAY,EAAE;AAAG,CAAC;AAEzC,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EAC9B,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,iCAAiC,CAAC;IACnE,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,EAAE,CAAC,CAAC;EACf;AACJ,CAAC;AAED,MAAME,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMP,aAAa,CAAC,CAAC;IACtCF,YAAY,CAACC,YAAY,GAAGQ,QAAQ;IACpCF,OAAO,CAACG,GAAG,CAAC,gCAAgC,EAAEV,YAAY,CAACC,YAAY,CAAC;EAC5E,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;EACxD;AACJ,CAAC;;AAED;AACAE,gBAAgB,CAAC,CAAC;;AAGlB;AACA;AACA;AACA;AACA;AACA,MAAMG,OAAO,GAAGA,CAACC,KAAK,GAAGZ,YAAY,EAAEa,MAAM,KAAK;EAC9C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,YAAY;MACb,OAAO;QAAE,GAAGF,KAAK;QAAEZ,YAAY,EAAE,CAAC,GAAGY,KAAK,CAACZ,YAAY,EAAEa,MAAM,CAACE,OAAO;MAAE,CAAC;IAG9E,KAAK,cAAc;MACf,MAAMC,OAAO,GAAGJ,KAAK,CAACZ,YAAY,CAACiB,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACC,EAAE,IAAIN,MAAM,CAACE,OAAO,CAACI,EAAE,CAAC;MAC3E,IAAIH,OAAO,EAAE;QACTA,OAAO,CAACI,GAAG,GAAGP,MAAM,CAACE,OAAO,CAACK,GAAG;QAChCJ,OAAO,CAACK,KAAK,GAAGR,MAAM,CAACE,OAAO,CAACM,KAAK;MACxC;MACA,OAAOT,KAAK;IAEhB,KAAK,eAAe;MAChB,OAAO,CAAC,CAAC;IAEb,KAAK,eAAe;MAChB,OAAO;QAAE,GAAGA,KAAK;QAAEZ,YAAY,EAAE,CAAC,GAAGY,KAAK,CAACZ,YAAY,CAACsB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACJ,EAAE,KAAKK,QAAQ,CAACX,MAAM,CAACE,OAAO,CAAC,CAAC;MAAE,CAAC;IAE7G;MACI,OAAOH,KAAK;EACpB;AAEJ,CAAC;AAED,eAAeD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}